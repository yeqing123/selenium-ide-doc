{"./":{"url":"./","title":"前言","keywords":"","body":"简介 Selenium IDE 是一款 web UI 自动化测试工具，是基于录制和回放操作的火狐浏览器的插件。本教程是官方资料的翻译。 如果不喜欢阅读文字教程，可以尝试学习 Selenium IDE web 自动化测试视频课程，并完成相应的通关任务。 2019 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/README.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/README.html\"});gitalk.render(\"gitalk-container\"); "},"getting-started.html":{"url":"getting-started.html","title":"快速上手","keywords":"","body":"入门 安装 从 Chrome 或 Firefox 商店安装 Selenium IDE。 启动 IDE 安装后，通过单击浏览器菜单栏中的图标启动它。 故障排除 在菜单栏中看不到 Selenium IDE 的图标？ 选项 1 确保在浏览器的扩展设置中启用了 IDE。 您可以通过在地址栏中输入以下内容并点击 Enter 来快速到达那里。 Chrome：chrome://extensions Firefox：about:addons 选项 2 可能已启用扩展程序但隐藏了图标。尝试调整菜单栏的大小以增加空间。 在 Chrome 中，您可以通过单击地址栏右侧，按住单击并向左或向右拖动来执行此操作。 在 Firefox 中，您需要右键单击，单击 Customize，调整菜单栏，然后单击 Done。 欢迎屏幕 启动 IDE 后，您将看到一个欢迎对话框。 这将使您可以快速访问以下选项： 在新项目中记录新测试 打开现有项目 创建一个新项目 关闭 IDE 如果这是您第一次使用 IDE（或者您正在开始一个新项目），请选择第一个选项。 记录您的第一次测试 创建新项目后，系统将提示您为其命名，然后要求提供基本 URL。基本 URL 是您正在测试的应用程序的 URL。只要设置一次，它就可以用于这个项目中的所有测试。如果需要，您也可以稍后更改。 完成这些设置后，将打开一个新的浏览器窗口，加载基本 URL 并开始录制。 与页面交互，您的每个操作都将记录在 IDE 中。要停止录制，请切换到 IDE 窗口并单击录制图标。 组织测试 测试 您可以通过单击左边栏菜单顶部的 + 符号（Tests 标题右侧），命名该测试，并单击 ADD 来添加新测试。 添加后，您可以手动输入命令，也可以单击 IDE 右上角的录制图标。 套件 测试可以组合成套件。 在项目创建时，Default Suite 会创建一个并自动添加第一个测试。 要创建和管理套件，请转到 Test suites 面板。您可以通过单击左边栏菜单顶部的下拉菜单（例如，单击单词 Tests）并选择 Test suites。 添加套件 要添加套件，请单击 Test Suites 标题右侧，左边栏菜单顶部的 + 符号，提供名称，然后单击 ADD。 添加测试 要将测试添加到测试套件中，请在测试套件名称上，执行以下操作： 单击 Test Suites 标题右侧显示的图标 点击 Add tests 从菜单中选择要添加的测试 点击 Select 删除测试 要删除测试，请将鼠标移到测试上，然后单击测试名称右侧的 X。 删除或重命名套件 要删除套件，请单击测试名称右侧显示的图标，单击 Delete，然后在后续提示中再次点击 Delete。 要重命名套件，将鼠标移动到套件名称上，单击名称右侧显示的图标，单击 Rename，更新名称，然后再单击 RENAME。 保存成果 要保存您刚刚在 IDE 中完成的所有操作，请单击 IDE 右上角的保存图标。 它将提示您输入保存项目的位置和名称。保存的最终结果是带 .side 扩展名的单个文件。 回放 浏览器里 您可以通过选择要播放的测试或套件并单击测试编辑器上方菜单栏中的播放按钮，在 IDE 中进行测试。 测试将在浏览器中回放。如果在录制完成后，浏览器窗口没有关闭，它将用于回放。否则，将打开并使用新的浏览器窗口。 跨浏览器 如果要在其他浏览器上运行 IDE 测试，请查看命令行运行器。 2019 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/getting-started.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/getting-started.html\"});gitalk.render(\"gitalk-container\"); "},"command-line-runner.html":{"url":"command-line-runner.html","title":"命令行运行器","keywords":"","body":"命令行运行器 您现在可以在任何浏览器上，以及在 Grid 上，同时运行所有 Selenium IDE 测试，而无需编写任何代码。 只需要安装 Selenium IDE 命令行运行器，获取必要的浏览器驱动程序（如果需要在本地运行测试），并从命令提示符启动运行器以及所需的选项。 先决条件 命令行运行器需要以下依赖项才能工作： node（Node.js 编程语言）版本 8 或 10 npm （NodeJS 包管理器）通常随 node 同时安装 selenium-side-runner （Selenium IDE 命令行运行器） 浏览器驱动程序（下面将详细介绍） > brew install node > npm install -g selenium-side-runner 注意：您的系统配置可能与上面示例中使用的不同（例如，MacOS 上的 Homebrew）。如果是这样，请参阅程序包管理器的 Node 安装文档，或直接从 Node 下载页面下载适用于您的操作系统的 Node 安装程序。 安装浏览器驱动程序 如果要在本地运行测试，则每个浏览器都需要一些额外的设置。 Selenium 通过称为浏览器驱动程序的小型二进制应用程序与每个浏览器通信。每个浏览器都有自己的驱动程序，您可以手动下载并添加到系统路径，也可以使用包管理器安装最新版本的浏览器驱动程序（推荐）。 您还需要在计算机上安装浏览器。 Chrome 对于 Chrome，您需要 ChromeDriver。 > npm install -g chromedriver Edge 对于 Microsoft Edge，您需要在 Windows 上运行，并且还需要 EdgeDriver。 > npm install -g edgedriver Firefox 对于 Firefox，您需要 geckodriver。 > npm install -g geckodriver IE 对于 Internet Explorer，您需要在 Windows 上运行，并且还需要 IEDriver。 > npm install -g iedriver IEDriver 需要一些额外的设置才能工作，细节信息请查看这里。 Safari 对于 Safari，您需要 SafariDriver。 它随附最新版本的 Safari。只需几个步骤即可在您的计算机上启用它。有关详细信息，请参阅 SafariDriver 文档的此部分。 启动 Runner 安装好所有内容后，只需从命令行调用 selenium-side-runner，就可以运行测试。命令行参数之前保存的项目文件（参见入门）。 > selenium-side-runner /path/to/your-project.side 注意：如果您有多个 .side 文件，则可以使用通配符（例如，/path/to/*.side）。 当您运行此命令时，它将在多个浏览器窗口中并行启动测试，分布在各个 n 进程上（n 是您的计算机上可用 CPU 核心数）。 进程数（以及其他内容）是可以在运行时配置的， 注意：并行执行是在套件级别上自动执行的。如果您希望套件内的测试并行执行，则需要更改设置。有关详细信息，请参阅套件内的测试并行化。 运行时配置 使用运行器，您可以在运行时传递不同的配置参数。 在本地不同的浏览器上运行测试 运行时配置的最常见用途是为本地测试执行指定不同的浏览器。 selenium-side-runner -c \"browserName=chrome\" selenium-side-runner -c \"browserName='internet explorer'\" selenium-side-runner -c \"browserName=edge\" selenium-side-runner -c \"browserName=firefox\" selenium-side-runner -c \"browserName=safari\" 注意：在本地运行测试时，每个浏览器都需要进行一些设置。有关详细信息，请参阅安装浏览器驱 在 Selenium Grid 上运行 要在 Grid 上运行测试（例如，您自己的 Grid 或 Sauce Labs 等托管服务提供商），您可以指定它的不同功能。 selenium-side-runner --server http://localhost:4444/wd/hub -c \"browserName='internet explorer' version='11.0' platform='Windows 8.1'\" --server 指定 Grid 的 URL，以及 -c 您希望 Grid 使用的功能。 您可以在此处查看可用功能的完整列表。 指定并行进程数 在 Grid 上运行时，您可能希望控制正在运行的并行会话数。为此，您可以使用 -w n 命令参数（其中 n 是您想要的进程数）。 selenium-side-runner -w 10 --server http://localhost:4444/wd/hub 运行器将自动将工作器数设置为计算机上可用的相同 CPU 核心数。在大多数情况下，这是最好的选择。 Chrome 专用功能 如果您在计算机上的非标准位置安装了 Chrome，则可以指定路径，以便 ChromeDriver 知道要查看的位置。 selenium-side-runner -c \"chromeOptions.binary='/path/to/non-standard/Chrome/install'\" 借助 Chrome 特定功能，您还可以无头地运行测试。 selenium-side-runner -c \"chromeOptions.args=[disable-infobars, headless]\" 触手可及的框架 还有其他细节与 Runner 一起开箱即用。您希望在传统的测试自动化框架中可以获得的东西。 更改基本 URL 通过指定不同的基本 URL，您可以轻松地将测试指向不同的环境（例如，本地开发，测试，升级，生产）。 selenium-side-runner --base-url https://localhost 过滤测试 您还可以选择使用 --filter target 命令标志（其中 target 是正则表达式值）运行测试的目标子集。包含给定搜索条件的测试名称将是唯一运行的名称。 selenium-side-runner --filter smoke 将测试结果输出到文件 如果需要将测试结果导出到文件（例如，作为 CI 过程的一部分运行时），可以组合使用 --output-directory 和 --output-format 命令行参数。 --output-directory 定义放置测试结果文件的位置。它可以采用绝对路径或相对路径。 --output-format 定义用于测试结果文件的格式。它可以是 jest（例如，JSON）或 junit（例如，XML）。默认格式是 jest（例如，如果您未指定类型）。 selenium-side-runner --output-directory=results # Outputs results in `jest` frormat in `./results/projectName.json' selenium-side-runner --output-directory=results --output-format=jest # Outputs results in `jest` frormat in `./results/projectName.json' selenium-side-runner --output-directory=results --output-format=junit # Outputs results in `junit` frormat in `./results/projectName.xml' 指定默认配置 您可以将运行时参数存储在配置文件中，而不是记住所需的所有命令行参数（可能变得难以操作）。 您可以使用两种配置文件。 选项 1 在您将运行测试的目录中创建一个 .side.yml 文件。Runner 将自动使用它。以下是文件内容的示例。 capabilities: browserName: \"firefox\" baseUrl: \"https://www.seleniumhq.org\" server: \"http://localhost:4444/wd/hub\" 如果要忽略该文件并使用命令行参数，--no-sideyml 请在运行时与其他命令一起使用。 选项 2 除了使用 .side.yml 文件之外，您还可以在 YAML 文件中指定运行时参数，其中包含您选择的名称和位置，然后在运行测试时指定其位置。 selenium-side-runner --config-file \"/path/to/your/config.yaml\" 注意：使用 --config-file 参数时，.side.yml 将被忽略。 Selenium IDE 配置 在套件中测试并行化 默认情况下，运行器并行执行套件，但套件内的测试按顺序执行。 要并行运行给定套件中的测试，您需要在 Selenium IDE 中更新该套件的设置。 切换到 Selenium IDE 中 Test Suites 的视图 单击要配置的套件名称旁边的下拉菜单，然后单击 Settings 单击复选框 Run in parallel 点击 Submit 保存您的 Selenium IDE 项目文件 要以这种方式配置多个套件，请在每个套件中重复步骤 1-4。一旦完成，请务必保存项目文件。 高级选项 额外的参数 Selenium IDE 的插件可以指定自己独特的运行时参数。你可以通过 --params 参数使用它们。 此选项采用各种选项的字符串（类似于您指定功能的方式）。 基本用法 您可以指定参数的名称及其值。最基本的方法是指定一个字符串值。 selenium-side-runner --params \"a='example-value'\" 嵌套参数 参数也可以使用点表示法嵌套。 selenium-side-runner --params \"a.b='another example-value'\" 数组值 除了字符串之外，您还可以指定字母/数字值数组。 selenium-side-runner --params \"a.b.c=[1,2,3]\" 多个参数 --params 只能调用一次，但您可以通过空格符分隔指定多个参数。 selenium-side-runner --params \"a='example-value' a.b='another example-value' a.b.c=[1,2,3]\" 使用代理服务器 您可以使用 runner 中的以下选项将代理功能传递给浏览器。 直接代理 此选项将 WebDriver 配置为绕过所有浏览器代理。 从命令行： > selenium-side-runner --proxy-type=direct 在 .side.yaml： proxyType: direct 手动代理 手动配置浏览器代理。 从命令行： selenium-side-runner --proxy-type=manual --proxy-options=\"http=localhost:434 bypass=[http://localhost:434, http://localhost:8080]\" 在 .side.yaml： proxyType: manual proxyOptions: http: http://localhost:434 https: http://localhost:434 ftp: http://localhost:434 bypass: - http://localhost:8080 - http://host:434 - http://somethingelse:32 PAC代理 配置 WebDriver 以使用给定 URL 处的 PAC 文件设置浏览器代理。 从命令行： selenium-side-runner --proxy-type=pac --proxy-options=\"http://localhost/pac\" 在 .side.yaml： proxyType: pac proxyOptions: http://localhost/pac SOCKS 代理 为 SOCKS 代理创建代理配置。 从命令行： selenium-side-runner --proxy-type=socks --proxy-options=\"socksProxy=localhost:434 socksVersion=5\" 在 .side.yaml： proxyType: socks proxyOptions: socksProxy: localhost:434 socksVersion: 5 系统代理 配置 WebDriver 以使用当前系统的代理。 从命令行： selenium-side-runner --proxy-type=system 在 .side.yaml： proxyType: system 代码导出 如果您正在尝试学习如何将记录的测试转换为 WebDriver 代码，或者您希望将记录的测试集成到现有的自定义测试框架中，那么您需要的是代码导出，现在可用于所选语言。你可以在这里了解更多！ 2019 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/command-line-runner.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/command-line-runner.html\"});gitalk.render(\"gitalk-container\"); "},"control-flow.html":{"url":"control-flow.html","title":"控制流","keywords":"","body":"控制流 Selenium IDE 附带了一些命令，可以让您添加条件逻辑以及循环到测试中。 这使您只有在满足应用程序中的某些条件时才执行命令（或一组命令），或者根据预定义的条件重复执行命令。 JavaScript 表达式 使用 JavaScript 表达式检查应用程序中的条件。 您可以在测试期间的任何时候使用 execute script 或 execute async script 命令运行 JavaScript 代码段，并将结果存储在变量中。这些变量可用于控制流命令。 您还可以直接在控制流命令中使用 JavaScript 表达式。 可用命令 控制流命令通过指定打开和关闭命令来表示命令的集合（或块）。 以下是每个可用的控制流命令以及它们的伴随和/或关闭命令。 if，else if，else，end times，end do，repeat if while，end 让我们逐步介绍每个例子。 条件分支 条件分支使您可以更改测试中的行为。 if 这是条件块的打开命令。 与此同时，您提供一个您想要评估的 JavaScript 表达式。这可以包含从测试中的先前 JavaScript 表达式创建的变量。这些都放在 if 命令的 target 字段。 如果该表达式评估为 true 则测试将执行它后面，直到下一个条件控制流命令命令（例如，else if，else，或 end）。 如果该表达式评估为 false 将跳过随后的命令和跳转到下一个相关条件控制流命令（例如，else if，else，或 end）。 else if 此命令在 if 命令块中使用。 类似 if 它在 target 输入字段中使用 JavaScript 表达式来评估，执行其后面的命令分支，或者跳到下一个相关的控制流命令（例如，else 或 end）。 else else 是你可以拥有的 if 块的最后一个条件。如果未满足任何先前条件，则将执行此命令分支。 完成后它将跳转到 end 命令。 end 该命令终止条件命令块。如果没有它，命令块将不完整，您将收到一条有用的错误消息，让您在尝试运行测试时知道。 循环 循环使您可以迭代给定的命令集。 times 有了 times 你可以指定一个迭代次数要执行的命令集。该数字进入命令的 target 输入字段 times。 要关闭 times 命令块，请务必使用 end 命令。 do 使用 do 命令启动循环，然后是要执行的命令，并以 repeat if 命令结束。repeat if 获取您要在 target 字段中评估的 JavaScript 表达式。 do 将首先执行之后的命令，然后评估 repeat if 中的条件表达式。如果表达式返回，true 则测试将跳回 do 命令并重复该序列。 这将继续，直到条件返回 false 或触发无限循环保护————默认为 1000 次尝试。您可以通过在 repeat if 命令的 value 字段中指定数字来覆盖此默认值。 while 随 while 您提供要在 target 输入字段中评估的 JavaScript 表达式。如果它评估为 true 命令块，则执行该命令块直到它到达 end 命令。 完成后，测试将跳回到 while 命令并重复相同的序列（首先检查条件是否为 true 或 false）。 要关闭 while 命令块，请使用 end 命令。 循环将重试，直到条件返回 false 或触发无限循环保护————默认为 1000 尝试。您可以通过在 while 命令的 value 字段中指定数字来覆盖此默认值。 forEach 保存最后的最佳，我们有能力迭代一个集合（例如，JS 数组），并在我们这样做时引用该集合中的每个项目。 在 target 字段中，您可以指定包含要迭代的数组的变量的名称。在 value 字段中，您可以指定要使用的迭代器变量的名称。对于数组中的每个条目，将执行后面的命令。在每次迭代期间，可以通过迭代器变量访问当前条目的内容。 嵌套命令 您可以根据需要嵌套控制流命令（例如，if 块可以放在 while 块内，反之亦然）。 语法验证 如果您不确定控制流语法是否正确，请尝试运行测试以查看。IDE 将发现控制流语法中的错误，并调出不正确或缺失的特定命令。 2019 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/control-flow.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/control-flow.html\"});gitalk.render(\"gitalk-container\"); "},"code-export.html":{"url":"code-export.html","title":"代码导出","keywords":"","body":"代码导出 入门 您可以通过右键单击测试或套件，选择 Export，选择目标语言并单击 Export，将测试或测试套件导出成 WebDriver 代码。 这个操作会将包含目标语言导出代码的文件保存到浏览器的下载目录中。 来源追踪代码注释 导出时，有一个可选项来启用原始跟踪代码注释。 这将在导出的文件中放置内联代码注释，其中包含有关生成它的 Selenium IDE 中的测试步骤的详细信息。 支持的导出 目前，支持导出到 Java，确切的是 Java for JUnit。 我们打算在 Selenium 的所有官方编程语言（例如，Java，JavaScript，C#，Python 和 Ruby）中的每种语言中至少支持一个测试框架。 欢迎提供帮助，以帮助为给定语言添加新语言和测试框架。有关如何操作的详细信息，请参见如何贡献。 Java JUnit Java JUnit 的导出代码是为了与 Java 8，JUnit 4.12 和最新版本的 Selenium 3 一起使用而构建的。 您应该能够获取导出的 Java 文件并将其放入标准 Maven 目录结构中，并使用 pom.xml 列出这些依赖项的文件并运行它。 下面是一个 pom.xml 示例，帮助您上手。 4.0.0 org.seleniumhq.selenium selenium-ide-java-code-export 1 http://maven.apache.org junit junit 4.12 test org.seleniumhq.selenium selenium-java 3.141.59 如何贡献 代码导出以模块化方式构建，以帮助实现贡献。 每种语言和测试框架都有自己的包，包含要导出的代码。每个代码片段映射到Selenium IDE 中的命令，并且每个这些包都依赖于底层的“核心”包，它可以完成所有繁重的任务。 下面是基于一个已经存在的语言，建立一个新语言或新测试框架的步骤。 创建一个新包 首先，复制现有的语言包（例如：packages/code-export-java-junit）并将其重命名（例如，文件夹和文件中的详细信息 package.json）到您想要贡献的目标语言和框架（例如：packages/code-export-ruby-rspec，等）。 接下来，在 package.json 中添加新的依赖软件包。 最后，在项目的根目录运行 yarn 命令。 更新定位器和命令 代码导出的机制是将特定语言的字符串转换为输出代码。其中最突出的是命令和定位器策略（例如，“by” 查找的语法）。 对于给定的语言，每个语句都有一个文件以及附带的测试文件。 你可以看到一个例子 packages/code-export-java-junit。 命令 命令测试 定位策略 定位策略测试 声明新命令时，可以将其输出为指定的字符串，也可以输出为指定缩进级别的对象。 内置于代码导出的是一个用于控制输出代码缩进的修饰符。如果您希望命令的输出是详细的并且是显式的，则此结构很有用。或者，如果该命令更改后面的命令的缩进级别。 创建钩子 钩子构成了要导出的代码结构的大部分（例如，套件，测试以及设置，拆卸等所有内容）。它们也是使插件能够将代码导出到测试或套件的不同部分的原因。 有 9 种不同的钩子： afterAll （所有测试完成后） afterEach（每次测试完成后 - 在 afterAll 之前） beforeAll （在所有测试运行之前） beforeEach（在每次测试之前 - 在 beforeAll 之后） command （为插件添加的新命令发出代码） dependency （添加附加语言依赖） inEachBegin （在每个测试中，在它的开头） inEachEnd （在每次测试中，在最后） variable （声明要在整个套件中使用的新变量） 你可以在 packages/code-export-java-junit 这里看到一个钩子实例：Hooks 更新特定于语言的属性 在每种语言中，您需要指定一些低级细节。像缩进的空格，如何声明方法，测试，套件等等。 您可以在 packages/code-export-java-junit 此处查看此实现的示例：特定于语言的选项 将其添加到混合物中 一旦你完成了所有其他工作，就可以将其连接起来以便在UI中使用。 这是可能的 packages/code-export/src/index.js。 您需要添加语言 availableLanguages。 测试和调整 最佳的端到端测试的代码导出是导出一系列测试并验证它们是否按预期运行。 从开发构建中，您可以访问种子测试。这是验证所有标准库命令是否适用于您的新语言的良好起点。 测试，修复以及再测试，直到您对最终结果有信心。 提交 PR 你已经完成了艰难的任务。现在提交 PR 只是一个简单的问题。请对 v3 分支 PR。 2019 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/code-export.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/code-export.html\"});gitalk.render(\"gitalk-container\"); "},"faq.html":{"url":"faq.html","title":"常见问题","keywords":"","body":"常见问题 我如何记录悬停？ 鼠标悬停（aka 悬停）操作很难自动捕获，作为记录周期的一部分。 要在测试中添加悬停，需要进行一些手动干预。有两种不同的方法可以做到。 选项 1：录制时添加 录制时，右键单击要悬停在其上的元素 从出现的菜单中单击 Selenium IDE 然后再单击 Mouse Over 确认 Mouse Over 测试步骤位于测试中的正确位置（如果需要，将其拖放到其他位置） 选项 2：在测试编辑器中手动添加 右键单击 IDE 中的测试步骤 选择 Insert new command 输入 mouse over 到 Command 输入字段 在 Target 输入字段中键入要悬停的定位器（或单击 Select target in page 并选择要悬停在其上的元素） 为什么键入日期输入字段的数字不正确显示？ 通过 Selenium IDE 的命令行运行程序运行测试时，会出现此问题。 要绕过它，你需要启用 w3c 模式，你可以通过传递 -c \"chromeOptions.w3c=true\" 作为启动跑步者的一部分来做。 启用 w3c 模式可能会影响 Selenium Actions 的性能（如果您的测试最终使用它们），那么只有在日期输入字段出现问题时才使用此模式。 在继续之前，如何使 IDE 等待某个条件成立？ 在某些情况下，IDE 中的内置等待策略是不够的。发生这种情况时，您可以使用其中一个可用的显式等待命令。 wait for element editable wait for element present wait for element visible wait for element not editable wait for element not present wait for element not visible 如何在文本验证中使用正则表达式？ 这是我们最终添加的功能（有关详细信息，请参阅问题 141）。作为一种变通方法，您可以使用 XPath 定位 starts-with 和 contains 关键字。 命令 目标 值 assertElementPresent //a@[starts-with(.,'you are the') and contains(., 'User to login today')] 如何滚动？ 在 Selenium IDE 中没有用于滚动的明确命令，因为在 Selenium 中没有实现。相反，您可以使用 scrollTo JavaScript 中的命令通过指定 x 和 y 滚动到的坐标来完成此操作。 命令 目标 值 executeScript window.scrollTo（0, 1000） 保存文件 为什么我保存我的 SIDE 项目的位置不被记住？ 为什么每次我想要保存项目时都需要单步执行“另存为”流程？ 为什么我需要覆盖以前保存的文件？ 所有这些问题都是同一问题的一部分 - 作为浏览器扩展，Selenium IDE 无法访问文件系统。提供“保存”功能的唯一方法是下载文件。当 IDE 移动到本机应用程序时，将解决此问题。这将为 IDE 首要文件系统提供访问权限，使其能够提供优质的“保存”体验。 如果您想保持更新，可以按照问题 363 进行操作。 如何在严格的代理/防火墙后面安装 IDE？ 在某些情况下，您可能没有完整的公共 Internet 访问权限（例如“公司代理或防火墙”后面）。在这些环境中，您需要获取构建的 Selenium IDE ZIP 文件的副本，以便记录自动化测试脚本。这可以在 GitHub 的 “Releases” 部分找到： https://github.com/SeleniumHQ/selenium-ide/releases 并非所有版本都包含 “selenium-ide.zip”，因为有些版本只是“源代码”版本。查找具有此 zip 文件的最新版本。这意味着它是提交给 Chrome 和 Firefox 商店的最新版本。 官方签名版本 从项目发布页面下载 zip 文件为您提供了一个未签名的 ZIP 文件。或者，您可以获得正式签名的安装程序，这些安装程序可以更好地使用“安全环境”： Firefox 附加组件 下载所需 “.xpi” 安装程序的说明 注意：如果您已经安装了插件（例如，在笔记本电脑上试图获取安装程序的副本），您只能在尝试访问它们时看到 REMOVE 按钮。因此，删除它们一次，让安装程序移动到另一台未连接的计算机，然后根据需要在主设备的浏览器中重新安装。 Chrome 商店 下载所需“.crx”安装程序的说明 注意：您无法直接从 Chrome 商店获取 “.crx” 文件。相反，您需要在本地安装一次，然后转到计算机上的安装目录以检索它。 连接插件后为什么没有出现保存对话框？ 由于当前的 Chrome bug，如果您不回复 Selenium IDE 发出的消息，则不会进行进一步处理。要解决此问题，请务必 emit 使用实体监听操作 project 并回复 undefined： chrome.runtime.onMessageExternal.addListener((message, sender, sendResponse) => { if (message.action === \"emit\" && message.entity === \"project\") { sendResponse(undefined); } }); 2019 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/faq.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/faq.html\"});gitalk.render(\"gitalk-container\"); "},"commands.html":{"url":"commands.html","title":"命令","keywords":"","body":"命令 add selection 将选择添加到多选元素中的选项集。 参数 locator：元素定位器。 answer on next prompt 影响下一个警报提示。此命令将向其发送指定的答案字符串。如果警报已存在，则改为使用 “webdriver answer on visible prompt”。 参数 answer：给出响应弹出提示的答案。 assert 检查变量是否为预期值。变量的值将转换为字符串以进行比较。如果断言失败，测试将停止。 参数 variable name：不带括号的变量名。 expected value：您期望变量包含的结果（例如，true，false 或其他值）。 assert alert 断定已弹出包含指定文本的警告弹框。如果断言失败，测试将停止。 参数 alert text：要检查的文本 assert checked 断定目标元素已经勾选。如果断言失败，测试将停止。 参数 locator：元素定位器。 assert confirmation 断定已弹出确认弹框。如果断言失败，测试将停止。 assert editable 断定目标元素是可编辑的。如果断言失败，测试将停止。 参数 locator：元素定位器。 assert element present 确认目标元素存在于页面的某个位置。如果断言失败，测试将停止。 参数 locator：元素定位器。 assert element not present 断定目标元素不在页面的任何位置。如果断言失败，测试将停止。 参数 locator：元素定位器。 assert not checked 断定目标元素没有被勾选。如果断言失败，测试将停止。 参数 locator：元素定位器。 assert not editable 断定目标元素不可编辑。如果断言失败，测试将停止。 参数 locator：元素定位器。 assert not selected value 断定下拉框中不包含属性值为 value 的选项。如果断言失败，测试将停止。 参数 select locator：标识下拉菜单的元素定位器。 text：精确的字符串匹配。对模式匹配的支持正在进行中。有关详细信息，请参阅 https://github.com/SeleniumHQ/selenium-ide/issues/141 assert not text 断定元素的文本不包含提供的值。如果断言失败，测试将停止。 参数 locator：元素定位器。 text：精确的字符串匹配。对模式匹配的支持正在进行中。有关详细信息，请参阅 https://github.com/SeleniumHQ/selenium-ide/issues/141 assert prompt 断定已弹出 JavaScript 提示弹框。如果断言失败，测试将停止。 assert selected value 断定下拉框中包含属性值为 value 的选项。如果断言失败，测试将停止。 参数 select locator：标识下拉菜单的元素定位器。 text：精确的字符串匹配。对模式匹配的支持正在进行中。有关详细信息，请参阅 https://github.com/SeleniumHQ/selenium-ide/issues/141 assert selected label 断定下拉框中包含指定标签的选项。如果断言失败，测试将停止。 参数 select locator：标识下拉菜单的元素定位器。 text：精确的字符串匹配。对模式匹配的支持正在进行中。有关详细信息，请参阅 https://github.com/SeleniumHQ/selenium-ide/issues/141 assert text 断定元素的文本中包含提供的值。如果断言失败，测试将停止。 参数 locator：元素定位器。 text：精确的字符串匹配。对模式匹配的支持正在进行中。有关详细信息，请参阅 https://github.com/SeleniumHQ/selenium-ide/issues/141 assert title 断定当前页面的标题包含提供的文本。如果断言失败，测试将停止。 参数 text：精确的字符串匹配。对模式匹配的支持正在进行中。有关详细信息，请参阅 https://github.com/SeleniumHQ/selenium-ide/issues/141 assert value 断定输入字段（或带有值参数的任何其他内容）的（空白修剪）值。对于复选框/单选元素，该值将为 “on” 或 “off”，具体取决于是否选中了元素。如果断言失败，测试将停止。 参数 locator：元素定位器。 text：精确的字符串匹配。对模式匹配的支持正在进行中。有关详细信息，请参阅 https://github.com/SeleniumHQ/selenium-ide/issues/141 check 检查切换按钮（复选框/单选框）。 参数 locator：元素定位器。 choose cancel on next confirmation 影响下一个确认提醒。此命令将取消它。如果警报已存在，则使用 “webdriver 选择取消可见确认”代替。 choose cancel on next prompt 影响下一个警报提示。此命令将取消它。如果警报已存在，则使用 “webdriver 在可见提示上选择取消”。 choose ok on next confirmation 影响下一个确认提醒。该命令将接受它。如果警报已存在，则使用 “webdriver 在可见确认时选择确定”。 click 单击目标元素（例如，链接，按钮，复选框或单选按钮）。 参数 locator：元素定位器。 click at 单击目标元素（例如，链接，按钮，复选框或单选按钮）。坐标相对于目标元素（例如，0,0 是元素的左上角），并且主要用于检查在它们上传递的效果，例如材料波纹效应。 参数 locator：元素定位器。 coord string：指定鼠标事件相对于从定位器找到的元素的 x，y 位置（例如，10, 20）。 close 关闭当前窗口。无需关闭初始窗口，IDE 将重新使用它; 关闭它可能会导致测试性能下降。 debugger 中断执行并进入调试器 do 创建一个至少执行一次前进命令的循环。使用 repeat if 命令终止分支。 double click 双击元素（例如，链接，按钮，复选框或单选按钮）。 参数 locator：元素定位器。 double click at 双击目标元素（例如，链接，按钮，复选框或单选按钮）。坐标相对于目标元素（例如，0,0 是元素的左上角），并且主要用于检查在它们上传递的效果，例如材料波纹效应。 参数 locator：元素定位器。 coord string：指定鼠标事件相对于从定位器找到的元素的 x，y 位置（例如，10, 20）。 drag and drop to object 拖动一个元素并将其放在另一个元素上。 参数 locator of object to be dragged：要拖动的元素的定位器。 locator of drag destination object：元素的定位符，其位置（例如，其中最中心的像素）将是要拖动的对象的定位符被丢弃的点。 echo 将指定的消息打印到 Selenese 表中的第三个表格单元格中。对调试很有用。 参数 message：要打印的消息。 edit content 设置内容可编辑元素的值，就像您键入内容一样。 参数 locator：元素定位器。 value：要键入的值。 else if 块的一部分。当不满足 if 和/或 if 条件时，执行此分支中的命令。使用end 命令终止分支。 else if if 块的一部分。如果未满足 if 条件，则执行此分支中的命令。使用 end 命令终止分支。 参数 conditional expression：返回布尔结果的 JavaScript 表达式，用于控制流命令。 end 终止 if，while 和 times 的控制流程块。 execute script 在当前选定的框架或窗口的上下文中执行JavaScript片段。脚本片段将作为匿名函数的主体执行。要存储返回值，请使用“return”关键字并在值输入字段中提供变量名称。 参数 script：要运行的 JavaScript 代码段。 variable name：不带括号的变量名。 execute async script 在当前选定的框架或窗口的上下文中执行 JavaScript 的异步片段。脚本片段将作为匿名函数的主体执行，并且必须返回 Promise。如果您使用 'return' 关键字，则 Promise 结果将保存在变量中。 参数 script：要运行的 JavaScript 代码段。 variable name:：不带括号的变量名。 for each 创建一个循环，为给定集合中的每个项执行前进命令。 参数 array variable name：包含 JavaScript 数组的变量的名称。 iterator variable name：在循环控制流命令中迭代集合时使用的变量的名称（例如，对于每个）。 if 在测试中创建条件分支。使用 end 命令终止分支。 参数 conditional expression：返回布尔结果的 JavaScript 表达式，用于控制流命令。 mouse down 模拟用户按下鼠标左键（尚未释放）。 参数 locator：元素定位器。 mouse down at 模拟用户在指定位置按下鼠标左键（尚未释放）。 参数 locator：元素定位器。 coord string：指定鼠标事件相对于从定位器找到的元素的 x，y 位置（例如，10, 20）。 mouse move at 模拟用户在指定元素上按下鼠标按钮（尚未释放它）。 参数 locator：元素定位器。 coord string：指定鼠标事件相对于从定位器找到的元素的 x，y 位置（例如，10, 20）。 mouse out 模拟用户将鼠标指针移离指定元素。 参数 locator：元素定位器。 mouse over 模拟将鼠标悬停在指定元素上的用户。 参数 locator：元素定位器。 mouse up 模拟用户释放鼠标按钮时发生的事件（例如，停止按住按钮）。 参数 locator：元素定位器。 mouse up at 模拟用户在指定位置释放鼠标按钮（例如，停止按住按钮）时发生的事件。 参数 locator：元素定位器。 coord string：指定鼠标事件相对于从定位器找到的元素的 x，y 位置（例如，10, 20）。 open 打开 URL 并等待页面加载后再继续。它接受相对和绝对 URL。 参数 url：要打开的 URL（可以是相对的或绝对的）。 pause 等待指定的时间。 参数 wait time：等待的时间量（以毫秒为单位）。 remove selection 使用选项定位器从多选元素中的选定选项集中删除选择。 参数 locator：元素定位器。 option：选项定位器，通常只是一个选项标签（例如 “John Smith”）。 repeat if 有条件地终止 'do' 控制流分支。如果提供的条件表达式的结果为 true，则启动 do 循环。否则它结束循环。 参数 conditional expression：返回布尔结果的 JavaScript 表达式，用于控制流命令。 run 从当前项目运行测试用例。 参数 test case：项目中的测试用例名称。 run script 在当前测试窗口的主体中创建一个新的 “script” 标记，并将指定的文本添加到命令的主体中。请注意，这些脚本标记中抛出的 JS 异常不由 Selenium 管理，因此如果脚本有可能抛出异常，您应该将脚本包装在 try/catch 块中。 参数 script：要运行的 JavaScript 代码段。 select 使用选项定位器从下拉菜单中选择元素。选项定位器提供指定选择元素的不同方式（例如，label =，value =，id =，index =）。如果未提供选项定位器前缀，则将尝试匹配标签。 参数 select locator：标识下拉菜单的元素定位器。 option：选项定位器，通常只是一个选项标签（例如 “John Smith”）。 select frame 选择当前窗口中的帧。您可以多次调用此命令以选择嵌套帧。注意：要选择父框架，请使用 “relative = parent” 作为定位器。要选择顶部框架，请使用 “relative = top”。您还可以通过其基于 0 的索引号选择帧（例如，选择带有 “index = 0” 的第一帧，或选择带有 “index = 2” 的第三帧）。 参数 locator：元素定位器。 select window 使用窗口定位器选择弹出窗口。一旦选择了弹出窗口，所有命令都将转到该窗口。窗口定位器使用句柄来选择窗口。 参数 window handle：表示特定页面（选项卡或窗口）的句柄。 send keys 模拟指定元素上的击键事件，就像您按键键入值一样。这模拟真实用户键入指定字符串中的每个字符; 它也受到真实用户的限制，例如无法输入不可见或只读元素。这对需要显式键事件的动态UI小部件（如自动完成组合框）很有用。与简单的“type”命令不同，该命令将指定的值直接强制进入页面，此命令不会替换现有内容。 参数 locator：元素定位器。 key sequence：键入的键序列，可用于发送键击（例如：${KEY_ENTER}）。 set speed 设置执行速度（例如，设置每个 Selenium 操作之后的延迟的毫秒长度）。默认情况下，没有这样的延迟，例如，延迟是0毫秒。此设置是全局的，将影响所有测试运行，直到更改为止。 参数 wait time：等待的时间量（以毫秒为单位）。 set window size 设置浏览器的窗口大小，包括浏览器的界面。 参数 resolution：使用 Width x Height 指定窗口分辨率。（例如，1280 x 800）。 store 将目标字符串保存为变量以便于重复使用。 参数 text：要验证的文本。 variable name：不带括号的变量名。 store attribute 获取元素属性的值。不同浏览器的属性值可能不同（例如，“style” 属性就是这种情况）。 参数 attribute locator：一个元素定位符，后跟一个 @ 符号，然后是属性的名称，例如 “foo @ bar”。 variable name：不带括号的变量名。 store json 未定义 参数 json：JavaScript 对象的字符串表示形式。 variable name：不带括号的变量名。 store text 获取元素的文本并将其存储以供以后使用。这适用于包含文本的任何元素。 参数 locator：元素定位器。 variable name：不带括号的变量名。 store title 获取当前页面的标题。 参数 variable name：不带括号的变量名。 store value 获取元素的值并将其存储以供以后使用。这适用于任何输入类型元素。 参数 locator：元素定位器。 variable name：不带括号的变量名。 store window handle 获取当前页面的句柄。 参数 window handle：表示特定页面（选项卡或窗口）的句柄。 store xpath count 获取与指定的 xpath 匹配的节点数（例如，“//table” 将给出表的数量）。 参数 xpath：要评估的xpath表达式。 variable name：不带括号的变量名。 submit 提交指定的表格。这对于没有提交按钮的表单特别有用，例如单输入“搜索”表单。 参数 form locator：您要提交的表单的元素定位器。 times 创建一个循环，执行多次执行命令。 参数 times：一次控制流循环的次数将执行其块内的命令。 loop limit：一个可选参数，指定循环控制流命令可以执行的最大次数。这可以防止无限循环。默认值设置为 1000。 type 设置输入字段的值，就像输入字段一样。也可以用来设置组合框的值，复选框等。在这些情况下，值应该是所选选项的值，而不是可见文本。仅限 Chrome：如果指定了文件路径，则会将其上传到输入（对于 type = file），注意：不支持XPath定位器。 参数 locator：元素定位器。 value：要键入的值。 uncheck 取消选中切换按钮（复选框/单选框）。 参数 locator：元素定位器。 verify Soft断言变量是期望值。变量的值将转换为字符串以进行比较。即使验证失败，测试仍将继续。 参数 variable name：不带括号的变量名。 expected value：您期望变量包含的结果（例如，true，false 或其他值）。 verify checked 软断言已经检查了切换按钮（复选框/单选框）。即使验证失败，测试仍将继续。 参数 locator：元素定位器。 verify editable Soft断言指定的输入元素是否可编辑（例如，尚未禁用）。即使验证失败，测试仍将继续。 参数 locator：元素定位器。 verify element present 声明指定的元素在页面上的某个位置。即使验证失败，测试仍将继续。 参数 locator：元素定位器。 verify element not present 软断言指定的元素不在页面的某个位置。即使验证失败，测试仍将继续。 参数 locator：元素定位器。 verify not checked 软断言尚未检查切换按钮（复选框/单选框）。即使验证失败，测试仍将继续。 参数 locator：元素定位器。 verify not editable Soft断言指定的输入元素是否不可编辑（例如，尚未禁用）。即使验证失败，测试仍将继续。 参数 locator：元素定位器。 verify not selected value 声明未通过其 option 属性在选择菜单中选择了期望的元素。即使验证失败，测试仍将继续。 参数 select locator：标识下拉菜单的元素定位器。 verify not text 软断言元素的文本不存在。即使验证失败，测试仍将继续。 参数 locator：元素定位器。 text：要验证的文本。 verify selected label Soft声明指定 select 元素中所选选项的可见文本。即使验证失败，测试仍将继续。 参数 select locator：标识下拉菜单的元素定位器。 text：精确的字符串匹配。对模式匹配的支持正在进行中。有关详细信息，请参阅 https://github.com/SeleniumHQ/selenium-ide/issues/141 verify selected value Soft 声明已通过其 option 属性在选择菜单中选择了期望的元素。即使验证失败，测试仍将继续。 参数 select locator：标识下拉菜单的元素定位器。 verify text 软断言元素的文本存在。即使验证失败，测试仍将继续。 参数 locator：元素定位器。 text：要验证的文本。 verify title 软断言当前页面的标题包含提供的文本。即使验证失败，测试仍将继续。 参数 text：要验证的文本。 verify value 断言输入字段（或带有值参数的任何其他内容）的（空白修剪）值。对于复选框/单选元素，该值将为 “on” 或 “off”，具体取决于是否选中了元素。即使验证失败，测试仍将继续。 参数 locator：元素定位器。 text：精确的字符串匹配。对模式匹配的支持正在进行中。有关详细信息，请参阅 https://github.com/SeleniumHQ/selenium-ide/issues/141 wait for element editable 等待元素可编辑。 参数 locator：元素定位器。 wait time：等待的时间量（以毫秒为单位）。 wait for element not editable 等待元素不可编辑。 参数 locator：元素定位器。 wait time：等待的时间量（以毫秒为单位）。 wait for element not present 等待页面上不存在目标元素。 参数 locator：元素定位器。 wait time：等待的时间量（以毫秒为单位）。 wait for element not visible 等待目标元素在页面上不可见。 参数 locator：元素定位器。 wait time：等待的时间量（以毫秒为单位）。 wait for element present 等待页面上出现目标元素。 参数 locator：元素定位器。 wait time：等待的时间量（以毫秒为单位）。 wait for element visible 等待目标元素在页面上可见。 参数 locator：元素定位器。 wait time：等待的时间量（以毫秒为单位）。 webdriver answer on visible prompt 影响当前显示的警报提示。此命令指示 Selenium 为其提供指定的答案。如果警报尚未出现，则改为使用“在下一个提示时回答”。 参数 answer：给出响应弹出提示的答案。 webdriver choose cancel on visible confirmation 影响当前显示的确认警报。此命令指示 Selenium 取消它。如果警报尚未出现，请改为使用“在下次确认时选择取消”。 webdriver choose cancel on visible prompt 影响当前显示的警报提示。此命令指示 Selenium 取消它。如果警报尚未出现，请改为使用“在下一个提示中选择取消”。 webdriver choose ok on visible confirmation 影响当前显示的确认警报。此命令指示 Selenium 接受它。如果警报尚未出现，则使用“在下一次确认时选择确定”。 while 只要提供的条件表达式为 true，就创建一个重复执行前进命令的循环。 参数 conditional expression：返回布尔结果的 JavaScript 表达式，用于控制流命令。 loop limit：一个可选参数，指定循环控制流命令可以执行的最大次数。这可以防止无限循环。默认值设置为 1000。 2019 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/commands.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/commands.html\"});gitalk.render(\"gitalk-container\"); "},"arguments.html":{"url":"arguments.html","title":"参数","keywords":"","body":"参数 alertText 名称：alert text 描述：要检查的文字 answer 名称：answer 描述：给出响应弹出提示的答案。 attributeLocator 名称：attribute locator 描述：一个元素定位器，后跟一个@符号，然后是属性的名称，例如“foo @ bar”。 arrayVariableName 名称：array variable name 描述：包含 JavaScript 数组的变量的名称。 conditionalExpression 名称：conditional expression 描述：JavaScript 表达式，返回用于控制流命令的布尔结果。 coord 名称：coord string 描述：指定鼠标事件相对于从定位器找到的元素的 x，y 位置（例如， - 10,20）。 expectedValue 名称：expected value 描述：您期望变量包含的结果（例如，true，false或其他值）。 expression 名称：expression 描述：您要存储的值。 formLocator 名称：form locator 描述：要提交的表单的元素定位器。 handle 名称：window handle 描述：表示特定页面（选项卡或窗口）的句柄。 iteratorVariableName 名称：iterator variable name 描述：在循环控制流命令中迭代集合时使用的变量的名称（例如，对于每个）。 json 名称：json 描述：JavaScript 对象的字符串表示形式。 keySequence 名称：key sequence 描述：要键入的键序列，可用于发送键击（例如$ {KEY_ENTER}）。 locator 名称：locator 描述：元素定位器。 locatorOfDragDestinationObject 名称：locator of drag destination object 描述：元素的定位符，其位置（例如，其中最中心的像素）将是要拖动的对象的定位符被丢弃的点。 locatorOfObjectToBeDragged 名称：locator of object to be dragged 描述：要拖动的元素的定位器。 loopLimit 名称：loop limit 描述：可选参数，指定循环控制流命令可以执行的最大次数。这可以防止无限循环。默认值设置为1000。 message 名称：message 描述：要打印的消息。 optionLocator 名称：option 描述：选项定位器，通常只是一个选项标签（例如“John Smith”）。 pattern 名称：text 描述：精确的字符串匹配。对模式匹配的支持正在进行中。有关详细信息，请参阅 https://github.com/SeleniumHQ/selenium-ide/issues/141。 region 名称：region 描述：指定一个带坐标和长度的矩形（例如，“x：257，y：300，width：462，height：280”）。 resolution 名称：resolution 描述：使用 WidthxHeight 指定窗口分辨率。（例如，1280 x 800）。 script 名称：script 描述：要运行的 JavaScript 代码段。 selectLocator 名称：select locator 描述：标识下拉菜单的元素定位器。 testCase 名称：test case 描述：项目中的测试用例名称。 text 名称：text 描述：要验证的文本。 times 名称：times 描述：一次控制流循环的次数将执行其块内的命令。 url 名称：url 描述：要打开的 URL（可以是相对的或绝对的）。 value 名称：value 描述：要键入的值。 variableName 名称：variable name 描述：没有括号的变量的名称。 waitTime 名称：wait time 描述：等待的时间量（以毫秒为单位）。 xpath 名称：xpath 描述：要评估的 xpath 表达式。 2019 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/arguments.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c0fb01d8974fad3f4b9e\",\"clientSecret\":\"14af1e32e0a8bedc62a6e3ce097ae2fc5e8cc1d8\",\"repo\":\"selenium-ide-doc\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SeIDE\"],\"id\":\"/arguments.html\"});gitalk.render(\"gitalk-container\"); "}}